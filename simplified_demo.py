"""
Simplified MetaExtract Demo

Tests the simplified extraction engine with real LLM integration.
Demonstrates the core assignment requirements:
- P1: Complex schema handling (3-7 nesting levels, 50-150 objects)
- P2: Large document support (up to 10MB)
- P3: Adaptive strategy selection based on complexity
"""

import asyncio
import json
import time
import os
from typing import Dict, Any

from metaextract.simplified_extractor import SimplifiedMetaExtract


class SimplifiedDemo:
    """Demo for the simplified MetaExtract system"""
    
    def __init__(self):
        # Check for OpenAI API key
        if not os.getenv("OPENAI_API_KEY"):
            print("‚ö†Ô∏è  Warning: OPENAI_API_KEY not set. Please set it to run real extractions.")
            print("   You can still run schema analysis and see strategy selection.")
            # Create extractor without API key for analysis purposes
            try:
                self.extractor = SimplifiedMetaExtract("dummy-key")  # Won't be used for analysis
                self.has_api_key = False
                print("‚úÖ Schema analyzer available (no API key for extractions)")
            except Exception as e:
                print(f"‚ùå Failed to initialize analyzer: {e}")
                self.extractor = None
                self.has_api_key = False
        else:
            try:
                self.extractor = SimplifiedMetaExtract()
                self.has_api_key = True
                print("‚úÖ OpenAI integration configured")
            except Exception as e:
                print(f"‚ùå Failed to initialize extractor: {e}")
                self.extractor = None
                self.has_api_key = False
    
    def load_schema(self, schema_file: str) -> Dict[str, Any]:
        """Load a JSON schema from file"""
        try:
            with open(schema_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Failed to load schema {schema_file}: {e}")
            return {}
    
    def load_text(self, text_file: str) -> str:
        """Load sample text from file"""
        try:
            with open(text_file, 'r') as f:
                return f.read()
        except Exception as e:
            print(f"‚ùå Failed to load text {text_file}: {e}")
            return ""
    
    def analyze_schema_complexity(self, schema: Dict[str, Any], name: str):
        """Analyze and display schema complexity"""
        if not self.extractor:
            print(f"‚ö†Ô∏è  Cannot analyze {name} - no extractor available")
            return None
        
        print(f"\nüìä Analyzing {name} Schema")
        print("=" * 50)
        
        complexity = self.extractor._analyze_schema_complexity(schema)
        
        print(f"üìà Complexity Metrics:")
        print(f"   ‚Ä¢ Nesting Depth: {complexity.nesting_depth}")
        print(f"   ‚Ä¢ Total Objects: {complexity.total_objects}")
        print(f"   ‚Ä¢ Total Properties: {complexity.total_properties}")
        print(f"   ‚Ä¢ Complex Types: {'Yes' if complexity.has_complex_types else 'No'}")
        print(f"   ‚Ä¢ Estimated Tokens: {complexity.estimated_tokens:,}")
        print(f"   ‚Ä¢ Complexity Score: {complexity.complexity_score:.1f}")
        print(f"   ‚Ä¢ Classification: {'Complex' if complexity.is_complex else 'Simple'}")
        
        return complexity
    
    async def test_extraction(self, text: str, schema: Dict[str, Any], name: str, strategy: str = None):
        """Test extraction with given text and schema"""
        if not self.extractor or not self.has_api_key:
            print(f"‚ö†Ô∏è  Cannot test extraction for {name} - OpenAI API key not configured")
            return None
        
        print(f"\nüîç Testing {name} Extraction")
        print("=" * 50)
        print(f"üìù Input length: {len(text):,} characters")
        print(f"üìã Strategy: {strategy or 'auto'}")
        
        try:
            start_time = time.time()
            
            result = await self.extractor.extract(
                input_text=text,
                schema=schema,
                strategy=strategy
            )
            
            end_time = time.time()
            
            if result.success:
                print(f"‚úÖ Extraction successful!")
                print(f"   ‚è±Ô∏è  Processing time: {result.processing_time:.2f}s")
                print(f"   üéØ Confidence: {result.confidence_score:.2f}")
                print(f"   üìä Strategy used: {result.strategy_used}")
                print(f"   üî¢ Tokens used: {result.token_usage:,}")
                print(f"   üìÑ Chunks processed: {result.chunks_processed}")
                
                if result.validation_errors:
                    print(f"   ‚ö†Ô∏è  Validation errors: {len(result.validation_errors)}")
                    for error in result.validation_errors[:3]:
                        print(f"      ‚Ä¢ {error}")
                
                if result.low_confidence_fields:
                    print(f"   üö® Low confidence fields: {result.low_confidence_fields[:5]}")
                
                # Show a sample of extracted data
                if result.extracted_data:
                    print(f"\nüìÑ Sample extracted data:")
                    self._print_sample_data(result.extracted_data)
                
                return result
            else:
                print(f"‚ùå Extraction failed: {result.error_message}")
                return None
                
        except Exception as e:
            print(f"‚ùå Extraction error: {e}")
            return None
    
    def _print_sample_data(self, data: Dict[str, Any], max_items: int = 5):
        """Print a sample of extracted data"""
        if isinstance(data, dict):
            items = list(data.items())[:max_items]
            for key, value in items:
                if isinstance(value, (dict, list)):
                    print(f"   {key}: {type(value).__name__} with {len(value)} items")
                else:
                    value_str = str(value)[:50]
                    if len(str(value)) > 50:
                        value_str += "..."
                    print(f"   {key}: {value_str}")
            
            if len(data) > max_items:
                print(f"   ... and {len(data) - max_items} more fields")
    
    async def demo_strategy_selection(self):
        """Demonstrate automatic strategy selection"""
        print("\nüéØ Strategy Selection Demo")
        print("=" * 50)
        
        # Test different scenarios
        scenarios = [
            {
                "name": "Simple Resume",
                "schema": {
                    "type": "object",
                    "properties": {
                        "name": {"type": "string"},
                        "email": {"type": "string"},
                        "experience": {"type": "array", "items": {"type": "string"}}
                    }
                },
                "text": "John Doe, john@example.com. Experience: Python developer, Data scientist",
                "expected_strategy": "simple"
            },
            {
                "name": "Medium Complexity", 
                "schema": {
                    "type": "object",
                    "properties": {
                        "personal": {
                            "type": "object",
                            "properties": {
                                "name": {"type": "string"},
                                "contact": {
                                    "type": "object",
                                    "properties": {
                                        "email": {"type": "string"},
                                        "phone": {"type": "string"}
                                    }
                                }
                            }
                        },
                        "skills": {"type": "array", "items": {"type": "string"}}
                    }
                },
                "text": "John Doe contact: john@example.com, 555-1234. Skills: Python, ML, Data Science",
                "expected_strategy": "chunked"
            }
        ]
        
        if not self.extractor:
            print("‚ö†Ô∏è  Cannot demonstrate strategy selection - no extractor available")
            return
        
        for scenario in scenarios:
            print(f"\nüß™ Testing: {scenario['name']}")
            complexity = self.extractor._analyze_schema_complexity(scenario['schema'])
            
            # Predict strategy
            input_size = len(scenario['text'].encode('utf-8'))
            selected_strategy = self.extractor._select_strategy(complexity, input_size)
            
            print(f"   üìä Complexity Score: {complexity.complexity_score:.1f}")
            print(f"   üéØ Selected Strategy: {selected_strategy.value}")
            print(f"   ‚úÖ Expected: {scenario['expected_strategy']}")
            
            if self.extractor and self.has_api_key and selected_strategy.value in ['simple']:  # Only test simple ones to save API calls
                await self.test_extraction(scenario['text'], scenario['schema'], scenario['name'])
    
    async def run_demo(self):
        """Run the complete demonstration"""
        print("üöÄ Simplified MetaExtract Demo")
        print("=" * 60)
        
        # Demo 1: Schema Complexity Analysis
        print("\n" + "="*60)
        print("üìä SCHEMA COMPLEXITY ANALYSIS")
        print("="*60)
        
        # Load test schemas
        schemas = {
            "Resume": self.load_schema("testcases/convert your resume to this schema.json"),
            "GitHub Actions": self.load_schema("testcases/github_actions_schema.json"),
            "Paper Citations": self.load_schema("testcases/paper citations_schema.json")
        }
        
        complexities = {}
        for name, schema in schemas.items():
            if schema:
                complexity = self.analyze_schema_complexity(schema, name)
                complexities[name] = complexity
        
        # Demo 2: Strategy Selection
        await self.demo_strategy_selection()
        
        # Demo 3: Real Extractions (if API key available)
        if self.extractor and self.has_api_key:
            print("\n" + "="*60)
            print("üîç REAL EXTRACTION TESTS")
            print("="*60)
            
            # Sample resume text
            resume_text = """
            Sarah Johnson
            Senior Software Engineer
            Email: sarah.johnson@email.com
            Phone: (555) 987-6543
            Location: Seattle, WA
            
            PROFESSIONAL EXPERIENCE:
            
            Senior Software Engineer at Microsoft (2021-2024)
            ‚Ä¢ Led development of cloud-native microservices architecture
            ‚Ä¢ Managed team of 8 developers across 3 time zones
            ‚Ä¢ Implemented CI/CD pipelines reducing deployment time by 60%
            ‚Ä¢ Technologies: Python, React, Azure, Docker, Kubernetes
            ‚Ä¢ Achievements: Reduced system latency by 40%, improved code coverage to 95%
            
            Software Engineer at Amazon (2019-2021)
            ‚Ä¢ Built scalable web applications serving 10M+ users
            ‚Ä¢ Designed and implemented RESTful APIs
            ‚Ä¢ Worked with cross-functional teams on product features
            ‚Ä¢ Technologies: Java, Spring Boot, AWS, DynamoDB
            ‚Ä¢ Achievements: Launched 3 major features, improved API response time by 30%
            
            Junior Developer at Startup Inc (2018-2019)
            ‚Ä¢ Developed full-stack web applications
            ‚Ä¢ Collaborated with designers on user interface improvements
            ‚Ä¢ Technologies: Node.js, MongoDB, React
            
            EDUCATION:
            Master of Science in Computer Science, University of Washington (2018)
            ‚Ä¢ Thesis: "Machine Learning Applications in Distributed Systems"
            ‚Ä¢ GPA: 3.8/4.0
            
            Bachelor of Science in Computer Science, UC Berkeley (2016)
            ‚Ä¢ Magna Cum Laude
            ‚Ä¢ Relevant Coursework: Data Structures, Algorithms, Database Systems
            
            SKILLS:
            Programming Languages: Python, Java, JavaScript, TypeScript, Go, SQL
            Cloud Platforms: AWS, Azure, Google Cloud Platform
            Databases: PostgreSQL, MongoDB, DynamoDB, Redis
            DevOps: Docker, Kubernetes, Jenkins, GitHub Actions
            Frameworks: React, Spring Boot, Express.js, FastAPI
            
            CERTIFICATIONS:
            ‚Ä¢ AWS Certified Solutions Architect (2022)
            ‚Ä¢ Certified Kubernetes Administrator (2021)
            """
            
            # Test Resume extraction
            if schemas["Resume"]:
                await self.test_extraction(
                    resume_text, 
                    schemas["Resume"], 
                    "Resume",
                    strategy="simple"  # Force simple for demo
                )
            
            # Test with GitHub Actions text and schema
            github_text = self.load_text("testcases/github actions sample input.md")
            if github_text and schemas["GitHub Actions"]:
                # Test with hierarchical strategy for complex schema
                await self.test_extraction(
                    github_text,
                    schemas["GitHub Actions"],
                    "GitHub Actions",
                    strategy="hierarchical"
                )
        
        else:
            print("\n‚ö†Ô∏è  Skipping real extractions - OpenAI API key not configured")
            print("   Set OPENAI_API_KEY environment variable to test real extractions")
        
        print("\nüéâ Demo completed!")
        print("\nüìã Summary:")
        print("   ‚úÖ Simplified architecture with 3 clear strategies")
        print("   ‚úÖ Real OpenAI GPT-4 integration")
        print("   ‚úÖ Automatic strategy selection based on complexity")
        print("   ‚úÖ Support for complex schemas (P1 requirement)")
        print("   ‚úÖ Large document handling (P2 requirement)")
        print("   ‚úÖ Adaptive effort based on complexity (P3 requirement)")


async def main():
    """Main demo function"""
    demo = SimplifiedDemo()
    await demo.run_demo()


if __name__ == "__main__":
    print("üöÄ Starting Simplified MetaExtract Demo...")
    print("üìù This demo shows the simplified architecture working with real LLM integration")
    print()
    
    # Check for API key
    if not os.getenv("OPENAI_API_KEY"):
        print("üí° To see real extractions, set your OpenAI API key:")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        print()
    
    asyncio.run(main()) 